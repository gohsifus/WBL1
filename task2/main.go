package main
/*
Написать программу, которая конкурентно рассчитает значение квадратов чисел
взятых из массива (2,4,6,8,10) и выведет их квадраты в stdout.
*/

import (
	"fmt"
	"sync"
)

// way1 поскольку мы используем массив а не слайс кол-во элементов известно заранее
// мы можем запустить n go рутин пишущих значения в канал и столько же читающих и выводящих их
func way1() {
	ch := make(chan int)
	inputData := [5]int{2, 4, 6, 8, 10}

	for _, v := range inputData {
		//Важно передать значение v в рутину, иначе вывод будет не определен,
		//хотя при небольшом кол-ве элементов это заметно не будет
		go func(value int) {
			ch <- value * value
		}(v)
	}

	for i := 0; i < 5; i++ {
		fmt.Println(<-ch)
	}
}

// way2 тут мы запускаем n go рутин которые вычисляют и сразу выводят значения,
// для того чтобы главная рутина не завершилась раньше остальных используем WaitGroup
func way2() {
	wg := &sync.WaitGroup{}
	inputData := [5]int{2, 4, 6, 8, 10}

	for _, v := range inputData {
		//Увеличиваем счетчик на 1
		wg.Add(1)
		go func(value int) {
			fmt.Println(value * value)
			//По завершении рутины уменьшаем счетчик
			wg.Done()
		}(v)
	}

	//Главная рутина блокируется пока счетчик не станет = 0
	wg.Wait()
}

func main() {
	way1() //Способ 1
	fmt.Println("***********")
	way2() // Способ 2
}
